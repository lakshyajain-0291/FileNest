name: Generate Changelog

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to generate changelog for'
        required: true
        default: 'latest'

jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g conventional-changelog-cli
          npm install -g auto-changelog

      - name: Generate changelog
        run: |
          # Generate changelog using conventional commits
          if [ "${{ github.event_name }}" = "release" ]; then
            # For releases, generate from last tag to current
            conventional-changelog -p angular -i CHANGELOG.md -s
          else
            # For manual trigger, regenerate entire changelog
            conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          fi

      - name: Commit changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: update changelog for ${{ github.event.release.tag_name || github.event.inputs.version }} [skip ci]"
            git push
          fi

      - name: Comment on release
        if: github.event_name == 'release'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
            const lines = changelog.split('\n');
            
            // Extract the latest version section
            let latestChanges = '';
            let inLatestSection = false;
            let sectionCount = 0;
            
            for (const line of lines) {
              if (line.startsWith('## [')) {
                sectionCount++;
                if (sectionCount === 1) {
                  inLatestSection = true;
                } else if (sectionCount === 2) {
                  break;
                }
              }
              
              if (inLatestSection) {
                latestChanges += line + '\n';
              }
            }
            
            // Update release description with changelog
            if (latestChanges.trim()) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                body: context.payload.release.body + '\n\n## Changelog\n\n' + latestChanges
              });
            }
