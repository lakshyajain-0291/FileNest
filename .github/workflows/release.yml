name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-go:
    name: Build Go Binaries
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goarch: arm64
            goos: windows
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Build
        run: |
          # Build backend if it exists
          if [ -d "backend" ] && [ -f "backend/go.mod" ]; then
            cd backend
            GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o filenest-backend-${{ matrix.goos }}-${{ matrix.goarch }}
            cd ..
          fi
          
          # Build network layer if it exists
          if [ -d "network" ] && [ -f "network/go.mod" ]; then
            cd network
            GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o filenest-network-${{ matrix.goos }}-${{ matrix.goarch }}
            cd ..
          fi
      - name: Upload Backend Binary
        if: ${{ success() && matrix.goos == 'linux' && matrix.goarch == 'amd64' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./backend/filenest-backend-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_name: filenest-backend-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream
        continue-on-error: true
      
      - name: Upload Network Binary
        if: ${{ success() && matrix.goos == 'linux' && matrix.goarch == 'amd64' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./network/filenest-network-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_name: filenest-network-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream
        continue-on-error: true

  build-frontend:
    name: Build Frontend
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Build
        run: |
          cd frontend
          if [ -f "package.json" ]; then
            npm ci
            npm run build
            zip -r frontend.zip build/ || zip -r frontend.zip dist/
          else
            echo "No package.json found, skipping frontend build"
            exit 0
          fi
      - name: Upload Release Asset
        if: ${{ success() }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./frontend/frontend.zip
          asset_name: filenest-frontend.zip
          asset_content_type: application/zip

  build-ai:
    name: Build AI Components
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Build
        run: |
          cd ai
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
            # Create distributable package
            tar -czf ai-components.tar.gz *.py models/ || echo "Creating basic archive"
            tar -czf ai-components.tar.gz . --exclude=__pycache__ --exclude=*.pyc
          else
            echo "No requirements.txt found, skipping AI build"
            exit 0
          fi
      - name: Upload Release Asset
        if: ${{ success() }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./ai/ai-components.tar.gz
          asset_name: filenest-ai.tar.gz
          asset_content_type: application/gzip
